#!/bin/bash

# script for running gromacs simulations

# $pdb_input=() #must share this with sander.sh input. will probably need its own script for that
# $pdb_output=() #to be defined



# NEEDED IMPORTS
# acpype
# gmx???

run_gmx () {			# this function may not actually be needed, as the amber2gmx is done via acpype. Keeping it in for potential future use
	pdb_input="$1"
	pdb_output="out_$pdb_input"
	
	# Generate a pdb file (usually a .gro but gmx can output pdb as well
	gmx pdb2gmx -f $pdb_input -o $pdb_output
}

run_acpype() {			# run acpype to generate gromacs file using topology file generated by amber

	topology_input=$1 #needs to be a prmtop
	pdb_input=$2 #needs to be an .inpcrd or possible a .pdb??

	if ! command -v acpype &> /dev/null; then
		echo "Error: acpype not installed. Please install and check the acpype command works"
		return 1
	fi 
	
	if [ -z "$topology_input" ] || [ -z "$pdb_input" ]; then
		echo "Error: missing topology or coordinate file"
		return 1
	fi

	if [ $? -ne 0 ]; then
		echo "Error: run_acpype function failed. Input files should be .prmtop and .inpcrd"
		return 1
	fi

	acpype -p $topology_input -x $pdb_input	
	
	# output files wille be file-name.gro and file-name.top generated inside a file-name.amb2gmx directory

}

check_leap () { # checks the existence of an AMBERHOME/leaprc directory and returns errors if does not exist

	directory_path="$AMBERHOME/dat/leap/cmd"
	if [ -d "$directory_path" ]; then
		return 0 # echo "Directory exists: $directory_path"
	else
		echo "$directory_path does not exist. leaprc files cannot be found"
		return 1
	fi	
}

run_tleap () { # amber command to create topology file from coord and forcefield.
	
	leap_in=$1 # needs a leap.in file with parameters for forcefield, coords etc. this leap.in file should be saved somewhere and changable depending on dopc or dec. ac.
	
	if ! command -v tleap &> /dev/null; then
		echo "Error: tleap not installed or command not working."
		return 1
	fi

	if [ -z "$leap_in" ]; then
		echo "Error: missing forcefield or coordinate file"
		return 1
	fi

	if [ $? -ne 0 ]; then
		echo "Error: run_tleap function failed. Coord files should be .crd or .pdb"
		return 1
	fi
	
	tleap -f $leap_in 


}

run_pdb4amber () { # cleans generic pdb files so they can be understood by amber
	
	pdb_in=$1

	if ! command -v pdb4amber &> /dev/null; then
		echo "Error: pdb4amber not installed or command not working."
		return 1
	fi

	if [ -z "$pdb_in" ]; then
		echo "Error: pdb file"
		return 1
	fi

	if [ $? -ne 0 ]; then
		echo "Error: run_pdb4amber function failed. Input should be .pdb"
		return 1
	fi

	pdb4amber -i $pdb_in -o amber_$pdb_in

	
}

run_parmed () { # a simple tool for seeing number of atoms, structure of pdb and citation info
	
	pdb_in=$1
	
	if ! command -v parmed &> /dev/null; then
		echo "Error: parmed not installed or command not working."
		return 1
	fi

	if [ -z "$pdb_in" ]; then
		echo "Error: pdb file"
		return 1
	fi

	if [ $? -ne 0 ]; then
		echo "Error: run_parmed function failed. Input should be .pdb"
		return 1
	fi

		
	parmed.download_pdb('$pdb_in')
	#pmd_file= parmed.download_pdb('$pdb_in')
	#pmd_file.authors ## gives you info on citation
	

}
